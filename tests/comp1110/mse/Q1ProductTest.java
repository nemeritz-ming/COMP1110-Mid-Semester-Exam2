package comp1110.mse;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.Timeout;

import java.util.Arrays;

import static org.junit.Assert.assertEquals;

public class Q1ProductTest {
    static final double DELTA = 1e-8;
    @Rule
    public Timeout globalTimeout = Timeout.millis(500);

    private void test(double[] values, int start, int end, double expected) {
        double out = Q1Product.product(values, start, end);
        assertEquals("Expected " + expected + " but got " + out + " for start " + start + ", end "+end+", and values " + Arrays.toString(values), expected, out, DELTA);
    }

    @Test
    public void testNull() {
        test(null, 0, 0, 0);
    }

    @Test
    public void testEmpty() {
        double[] v = {};
        test(v, 0, 0, 0);
    }

    @Test
    public void testSimple() {
        double[] v = {-3.0, 1.0, 0, 4.0, -0.5, 3.0, 2.0};
        test(v, 0, 0, -3.0);
        test(v, 0, 5, 0);
        test(v, 0, 1, -3.0);
        test(v, 3, 6, -12);
        test(v, 2, 4, 0);
        test(v, 3, 1, 0);
    }

    @Test
    public void medium() {
        double[] v0 = {-3.0, -0.0, -1.5, -0.5, 4.5, 4.5, -4.0, -4.5, 3.5, -0.5};
        test(v0, 6, 9, -31.5);
        double[] v1 = {1.5, 0.5, -0.0, -4.5, -4.5, 1.5, 2.5, 0.0, -2.5, -2.0};
        test(v1, 3, 0, 0.0);
        double[] v2 = {-4.0, -3.0, 0.0, -1.0, -2.0, 4.0, 1.0, 2.0, 3.0, -3.5};
        test(v2, 2, 4, 0.0);
        double[] v3 = {2.0, 4.5, 4.0, -2.0, -4.5, 2.0, 0.0, -2.0, -4.0, -0.0};
        test(v3, 5, 9, -0.0);
        double[] v4 = {1.0, 0.0, -3.5, 3.5, 3.5, -3.5, 3.5, 2.5, 2.0, -1.5};
        test(v4, 4, 5, -12.25);
        double[] v5 = {-4.0, 1.0, -3.5, -3.5, -2.5, 2.5, -2.5, -4.0, 4.5, 4.0};
        test(v5, 7, 9, -72.0);
        double[] v6 = {2.5, 2.5, 1.5, 4.5, -2.0, -1.0, -1.5, 4.5, 4.0, -4.0};
        test(v6, 1, 0, 0.0);
        double[] v7 = {-2.5, 1.0, 4.0, -2.5, 3.5, -3.5, 0.0, 3.5, -3.0, -2.0};
        test(v7, 5, 9, -0.0);
        double[] v8 = {-0.0, 2.0, 2.0, 1.5, -3.5, -0.5, -0.0, -4.5, 0.5, -3.0};
        test(v8, 6, 6, -0.0);
        double[] v9 = {-3.0, -3.0, -0.0, 3.0, -1.0, 4.5, 2.5, 4.5, 1.0, -1.0};
        test(v9, 5, 4, 0.0);
    }

    @Test
    public void longer() {
        double[] v0 = {-7.5, 5.5, 8.0, -0.0, 15.5, 17.0, 9.5, 1.0, 19.0, 17.5, -11.5, -17.0, 7.0, 8.0, 4.0, 5.5, 1.0, 13.5, -1.0, 16.0, -4.0, 16.0, 6.0, 3.0, 17.0, 19.0, -16.0, -18.5, 8.0, 19.0, -16.0, 3.5, -7.5, 13.0, -17.0, -19.5, -6.5, -19.5, -6.5, 13.5};
        test(v0, 15, 33, 1.0859238804750336E17);
        double[] v1 = {5.5, 0.5, 1.0, -3.5, -11.5, 13.0, 3.0, 5.0, -14.5, -2.5, -1.5, 12.0, 5.0, -0.5, 18.5, -16.5, 10.5, -7.5, -19.0, -0.0, -19.0, 1.0, -2.5, -19.5, 11.5, -0.0, 15.5, 19.5, 7.0, 19.0, -4.5, 2.5, 4.0, 3.0, -5.5, -19.0, -11.5, 14.0, -11.0, -17.5};
        test(v1, 0, 21, -0.0);
        double[] v2 = {-6.0, -11.0, 14.5, 11.0, 7.0, 4.5, -1.0, 4.5, -1.0, 3.0, 18.5, -11.5, -2.0, -11.5, -8.5, -1.0, 0.0, 3.0, -15.0, 11.5, 15.0, -1.5, 9.5, 6.0, 7.5, 5.5, 16.5, 5.0, 18.5, -1.0, -19.0, 17.5, -15.5, -1.0, -3.5, -6.0, 17.0, 12.5, 6.0, -10.0};
        test(v2, 0, 18, 0.0);
        double[] v3 = {-8.0, 19.5, 11.5, -17.5, -9.0, 2.5, -6.5, -7.5, -4.5, -12.0, -5.5, -18.0, 9.5, 4.0, 19.0, -2.0, -12.5, 2.5, -9.5, 11.0, -6.5, 9.0, 8.0, -12.5, -1.5, -18.5, -4.0, 19.5, 13.0, -13.5, 6.5, -6.5, -9.0, 15.0, -19.0, 19.5, 11.0, 4.0, -4.0, -7.0};
        test(v3, 1, 30, -1.5674512120283252E27);
        double[] v4 = {8.0, -10.0, -9.5, 16.0, 19.0, 8.5, 14.5, 0.0, 10.5, -6.5, 15.0, 19.0, 9.0, -6.0, 17.0, -13.0, -15.5, -15.5, 18.5, 1.0, -10.0, -14.5, 12.0, 13.5, 4.5, 17.5, 18.5, 7.0, -8.0, 14.5, 7.0, -9.5, -3.5, -12.5, -16.5, -12.5, -18.0, 1.5, 7.0, -9.5};
        test(v4, 7, 22, -0.0);
        double[] v5 = {-9.5, -19.0, 10.0, -5.0, 4.0, -11.0, -1.5, 14.0, -4.0, -16.5, 4.0, 0.5, -18.5, -16.5, 6.0, 1.5, 8.5, 11.5, 18.0, 6.0, -9.0, 3.0, 19.5, -12.5, -7.0, 9.5, 17.5, -12.0, -7.5, 3.5, 13.5, -17.0, -0.0, 13.5, 13.5, 8.5, 7.0, 9.0, 4.5, 9.0};
        test(v5, 17, 0, 0.0);
        double[] v6 = {-17.5, -17.0, 3.5, -0.5, 4.5, -0.5, -15.5, 7.5, -13.5, -17.5, 12.5, -2.5, 9.5, 2.0, -3.5, 2.5, -0.5, -6.0, 17.0, -9.0, 18.5, -10.0, 9.0, -17.5, -0.5, 6.5, 10.0, 4.0, -4.5, -11.0, 1.5, -17.0, 2.0, -18.5, -12.5, -2.0, -5.0, 17.0, 10.0, -11.0};
        test(v6, 16, 29, 8.60624139375E10);
        double[] v7 = {-12.5, 6.0, -19.0, -5.0, -11.0, 0.5, -15.5, -7.5, -4.0, 11.0, 17.5, 18.0, 4.0, 13.0, -1.0, 18.0, -4.5, -6.0, 1.5, -1.0, -19.5, -2.0, -8.0, 7.0, -1.0, 3.5, 2.0, 8.0, 9.0, -4.5, -2.5, 12.5, -12.5, -16.5, -10.0, -19.0, 15.0, 9.0, -8.5, 19.0};
        test(v7, 6, 22, 1.90564349976E13);
        double[] v8 = {-16.5, 1.5, -13.0, 12.0, -6.0, -4.0, -15.5, -9.0, -14.5, -3.5, 5.5, 13.5, -6.0, 18.0, -11.5, -5.0, -0.5, -7.5, 14.5, 0.0, -0.0, -16.5, -16.5, 3.5, 10.5, -11.5, -12.5, -14.0, -12.0, 11.0, -10.5, 6.5, 9.0, 2.0, -11.0, 1.5, 11.0, -14.5, 1.0, 0.5};
        test(v8, 32, 39, 23685.75);
        double[] v9 = {-7.0, 10.5, -19.5, 15.0, -4.0, -10.0, 14.5, 4.5, 2.0, 18.5, 8.5, 11.0, 3.0, -17.5, 12.0, -6.5, -0.0, 5.0, -18.0, 8.0, 1.0, 1.5, -12.0, 1.5, 13.5, 18.0, 9.5, 5.5, 7.5, 1.0, -13.0, -12.5, 16.5, 5.0, 15.5, -11.0, -0.0, -4.0, 11.0, -19.0};
        test(v9, 10, 35, 0.0);
    }
}